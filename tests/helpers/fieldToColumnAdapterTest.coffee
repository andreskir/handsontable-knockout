#FieldToColumnAdapter
dummyBeforeSet = ->
dummyAfterSet = ->

test "The 'data' property in the ColumnSettings generated by FieldToColumnAdapter should be a function to access to the field's value for a given row", ->
	fieldData =
		name: "cover"
		text: "Cover"
		value: "MyValue"
		visible: true
		isReadOnly: false
		_type: "Field"
	
	row = new InputGridRow([fieldData],{})
	row.isNewRow = false
	
	adaptedField = new FieldToColumnAdapter(dummyBeforeSet,dummyAfterSet).getColumnFor(row.fields()[0])
	equal adaptedField.data(row),"MyValue"

	adaptedField.data(row,"NewValue")
	equal adaptedField.data(row),"NewValue"

test "The 'data' property in the ColumnSettings generated by FieldToColumnAdapter should return empty string when row isNewRow", ->
	fieldData =
		name: "cover"
		text: "Cover"
		value: "MyValue"
		visible: true
		isReadOnly: false
		_type: "Field"
	
	row = new InputGridRow([fieldData],{})
	row.isNewRow = true
	
	adaptedField = new FieldToColumnAdapter(dummyBeforeSet,dummyAfterSet).getColumnFor(row.fields()[0])
	equal adaptedField.data(row),""

test "FieldToColumnAdapter generates proper ColumnSettings", ->
	field = new Field
		name: "cover"
		text: "Cover"
		value: null
		visible: true
		isReadOnly: false
	
	adaptedField = new FieldToColumnAdapter(dummyBeforeSet,dummyAfterSet).getColumnFor(field)
	
	expectedColumn = 
		type: "text"
		title: 'Cover'
		readOnly: false

	equal adaptedField.type,expectedColumn.type
	equal adaptedField.title,expectedColumn.title
	equal adaptedField.readOnly,expectedColumn.readOnly

test "Generated ColumnSettings should use hasPopupRenderer when the field has opup", ->
	field = new Field
		name: "cover"
		text: "Cover"
		value: null
		visible: true
		isReadOnly: false
		hasPopup: -> true
	
	adaptedField = new FieldToColumnAdapter(dummyBeforeSet,dummyAfterSet).getColumnFor(field)
	
	equal adaptedField.renderer, HasPopupRenderer

test "Generated ColumnSettings should have empty renderer when the field hasn't got popup", ->
	field = new Field
		name: "cover"
		text: "Cover"
		value: null
		visible: true
		isReadOnly: false
		hasPopup: -> false
	
	adaptedField = new FieldToColumnAdapter(dummyBeforeSet,dummyAfterSet).getColumnFor(field)
	
	ok !adaptedField.renderer

#DatePickerToColumnAdapter

test "DatePickerToColumnAdapter generates proper ColumnSettings", ->
	field = new DatePicker
		name: "date"
		text: "Date"
		value: null
		visible: true
		isReadOnly: false
	
	adaptedField = new DatePickerToColumnAdapter(dummyBeforeSet,dummyAfterSet).getColumnFor(field)
	
	expectedColumn = 
		type: "date"

	equal adaptedField.type,expectedColumn.type

#SelectorToColumnAdapter

test "The 'data' property in the ColumnSettings generated by SelectorToColumnAdapter should be a function to access to the field's value by description for a given row", ->
	fieldData =
		name: "format"
		text: "Format"
		selectorData: [{id:'LP',description:'Long Play'},{id:'C',description:'Cassette'}]
		value: 'LP'
		visible: true
		isReadOnly: false
		_type: "Selector"
	
	row = new InputGridRow([fieldData],{})
	row.isNewRow = false
	
	adaptedField = new SelectorToColumnAdapter(dummyBeforeSet,dummyAfterSet).getColumnFor(row.fields()[0])
	equal adaptedField.data(row),"Long Play"

	adaptedField.data(row,"Cassette")
	equal adaptedField.data(row),"Cassette"

test "SelectorToColumnAdapter generates proper ColumnSettings", ->
	field = new Selector
		name: "format"
		text: "Format"
		selectorData: [{id:'LP',description:'Long Play'},{id:'C',description:'Cassette'}]
		value: null
		visible: true
		isReadOnly: false
	
	adaptedField = new SelectorToColumnAdapter(dummyBeforeSet,dummyAfterSet).getColumnFor(field)
	
	expectedColumn = 
		type: "autocomplete"
		strict: true

	equal adaptedField.type,expectedColumn.type
	equal adaptedField.strict,expectedColumn.strict

#MultiValueToColumnAdapter

test "The 'data' property in the ColumnSettings generated by MultiValueToColumnAdapter should be a function to access to the field's value for a given row", ->
	fieldData =
		name: "authors"
		text: "Authors"
		selectorData: [{id:'CP',description:'Charles Perez'},{id:'NG',description:'Nick Gomez'},{id:'WW',description:'Walter White'}]
		value: ['NG','WW']
		visible: true
		isReadOnly: false
		_type: "MultiValue"
	
	row = new InputGridRow([fieldData],{})
	row.isNewRow = false
	
	adaptedField = new MultiValueToColumnAdapter(dummyBeforeSet,dummyAfterSet).getColumnFor(row.fields()[0])
	equal adaptedField.data(row)[0],'NG'
	equal adaptedField.data(row)[1],'WW'

	adaptedField.data(row,['WW','CP'])
	equal adaptedField.data(row)[0],'WW'
	equal adaptedField.data(row)[1],'CP'


test "MultiValueToColumnAdapter generates proper ColumnSettings", ->
	field = new MultiValue
		name: "authors"
		text: "Authors"
		selectorData: [{id:'CP',description:'Charles Perez'},{id:'NG',description:'Nick Gomez'},{id:'WW',description:'Walter White'}]
		value: null
		visible: true
		isReadOnly: false
	
	adaptedField = new MultiValueToColumnAdapter(dummyBeforeSet,dummyAfterSet).getColumnFor(field)
	
	expectedColumn = 
		type: "multiValue"

	equal adaptedField.type,expectedColumn.type